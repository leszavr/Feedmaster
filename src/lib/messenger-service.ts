/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–∞–º–∏
 */

import { 
  MessengerAdapterFactory,
  MessengerAdapterManager,
  MessengerAdapter,
  MessengerPlatform,
  MessengerCredentials,
  UnifiedMessage,
  SendMessageResponse,
  BotInfo,
  MessengerError
} from '@/lib/adapters';
import { Bot } from '@/lib/types';

export class AppMessengerService {
  private static instance: AppMessengerService;
  private adapterManager = new MessengerAdapterManager();
  private adaptersCache = new Map<string, MessengerAdapter>();

  static getInstance(): AppMessengerService {
    if (!AppMessengerService.instance) {
      AppMessengerService.instance = new AppMessengerService();
    }
    return AppMessengerService.instance;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
   */
  async testBotConnection(bot: Bot): Promise<{
    success: boolean;
    botInfo?: BotInfo;
    permissions?: any;
    error?: string;
  }> {
    try {
      const credentials: MessengerCredentials = {
        token: bot.token,
        platform: bot.platform,
      };

      const adapter = await MessengerAdapterFactory.createAndInitialize(credentials);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await adapter.getBotInfo();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
      const permissions = await adapter.checkBotPermissions(bot.channelId);
      
      await adapter.dispose();
      
      return {
        success: true,
        botInfo,
        permissions,
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
   */
  async initializeBot(bot: Bot): Promise<void> {
    const credentials: MessengerCredentials = {
      token: bot.token,
      platform: bot.platform,
    };

    await this.adapterManager.addAdapter(bot.id, credentials);
    
    // –ö—ç—à–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const adapter = this.adapterManager.getAdapter(bot.id);
    if (adapter) {
      this.adaptersCache.set(bot.id, adapter);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –±–æ—Ç–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async removeBot(botId: string): Promise<void> {
    await this.adapterManager.removeAdapter(botId);
    this.adaptersCache.delete(botId);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async sendMessage(
    botId: string,
    channelId: string,
    message: UnifiedMessage
  ): Promise<SendMessageResponse> {
    const adapter = this.adaptersCache.get(botId) || this.adapterManager.getAdapter(botId);
    
    if (!adapter) {
      throw new Error(`Bot ${botId} not initialized`);
    }

    return await adapter.sendMessage(channelId, message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ—Ç–æ–≤
   */
  async sendMessageToMultipleBots(
    botIds: string[],
    channelId: string,
    message: UnifiedMessage
  ): Promise<Array<{ botId: string; result: SendMessageResponse }>> {
    const results = [];

    for (const botId of botIds) {
      try {
        const result = await this.sendMessage(botId, channelId, message);
        results.push({ botId, result });
      } catch (error) {
        results.push({
          botId,
          result: {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
          },
        });
      }
    }

    return results;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async sendToCrossPlatform(
    botConfigs: Array<{ bot: Bot; channelId?: string }>,
    message: UnifiedMessage
  ): Promise<Array<{ botId: string; platform: MessengerPlatform; result: SendMessageResponse }>> {
    const results = [];

    for (const config of botConfigs) {
      const channelId = config.channelId || config.bot.channelId;
      
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!this.adaptersCache.has(config.bot.id)) {
          await this.initializeBot(config.bot);
        }

        const result = await this.sendMessage(config.bot.id, channelId, message);
        results.push({
          botId: config.bot.id,
          platform: config.bot.platform,
          result,
        });
      } catch (error) {
        results.push({
          botId: config.bot.id,
          platform: config.bot.platform,
          result: {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
          },
        });
      }
    }

    return results;
  }

  /**
   * –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  async publishPost(
    bots: Bot[],
    post: {
      title: string;
      content: string;
      link?: string;
      summary?: string;
    },
    options?: {
      format?: 'markdown' | 'html';
      includeLink?: boolean;
      includeSummary?: boolean;
    }
  ) {
    const opts = {
      format: 'markdown' as const,
      includeLink: true,
      includeSummary: false,
      ...options,
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–π
    let messageText = `**${post.title}**\n\n`;
    
    if (opts.includeSummary && post.summary) {
      messageText += `${post.summary}\n\n`;
    } else {
      messageText += `${post.content}\n\n`;
    }
    
    if (opts.includeLink && post.link) {
      messageText += `üîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ](${post.link})`;
    }

    const message: UnifiedMessage = {
      text: messageText,
      format: opts.format,
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    for (const bot of bots) {
      if (!this.adaptersCache.has(bot.id)) {
        await this.initializeBot(bot);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const botConfigs = bots.map(bot => ({ bot }));
    return await this.sendToCrossPlatform(botConfigs, message);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  async getBotsStatus(): Promise<Array<{
    botId: string;
    platform: MessengerPlatform;
    status: 'active' | 'error';
    botInfo?: BotInfo;
    error?: string;
  }>> {
    const results = [];
    const allAdapters = this.adapterManager.getAllAdapters();

    for (const [botId, adapter] of this.adaptersCache.entries()) {
      try {
        const botInfo = await adapter.getBotInfo();
        results.push({
          botId,
          platform: adapter.platform,
          status: 'active' as const,
          botInfo,
        });
      } catch (error) {
        results.push({
          botId,
          platform: adapter.platform,
          status: 'error' as const,
          error: error instanceof Error ? error.message : 'Unknown error',
        });
      }
    }

    return results;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
   */
  getStats() {
    return {
      ...this.adapterManager.getStats(),
      cached: this.adaptersCache.size,
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
   */
  async setupWebhook(
    botId: string,
    webhookUrl: string,
    options?: { maxConnections?: number; allowedUpdates?: string[] }
  ): Promise<boolean> {
    const adapter = this.adaptersCache.get(botId) || this.adapterManager.getAdapter(botId);
    
    if (!adapter) {
      throw new Error(`Bot ${botId} not initialized`);
    }

    return await adapter.setWebhook(webhookUrl, options);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
   */
  async deleteWebhook(botId: string): Promise<boolean> {
    const adapter = this.adaptersCache.get(botId) || this.adapterManager.getAdapter(botId);
    
    if (!adapter) {
      throw new Error(`Bot ${botId} not initialized`);
    }

    return await adapter.deleteWebhook();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
   */
  async getWebhookInfo(botId: string) {
    const adapter = this.adaptersCache.get(botId) || this.adapterManager.getAdapter(botId);
    
    if (!adapter) {
      throw new Error(`Bot ${botId} not initialized`);
    }

    return await adapter.getWebhookInfo();
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  async dispose(): Promise<void> {
    await this.adapterManager.dispose();
    this.adaptersCache.clear();
  }
}