/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤
 * –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API
 * –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
 */

import { 
  MessengerAdapterFactory, 
  MessengerAdapterManager,
  MessengerPlatform,
  MessengerCredentials,
  UnifiedMessage,
  MessengerError 
} from '@/lib/adapters';
import { Bot } from '@/lib/types';

/**
 * –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞
 */
export async function createBotAdapter(bot: Bot) {
  try {
    const credentials: MessengerCredentials = {
      token: bot.token,
      platform: bot.platform,
    };

    // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    const adapter = await MessengerAdapterFactory.createAndInitialize(credentials);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const botInfo = await adapter.getBotInfo();
    console.log('Bot info:', botInfo);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ
    const permissions = await adapter.checkBotPermissions(bot.channelId);
    console.log('Bot permissions:', permissions);
    
    return adapter;
  } catch (error) {
    if (error instanceof MessengerError) {
      console.error(`${error.platform} error:`, error.message);
    } else {
      console.error('Unexpected error:', error);
    }
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
 */
export async function sendMessageThroughAdapter(
  bot: Bot,
  message: UnifiedMessage
) {
  try {
    const adapter = await createBotAdapter(bot);
    
    const result = await adapter.sendMessage(bot.channelId, message);
    
    if (result.success) {
      console.log('Message sent successfully:', result.messageId);
    } else {
      console.error('Failed to send message:', result.error);
    }
    
    await adapter.dispose();
    return result;
  } catch (error) {
    console.error('Error sending message:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏
 */
export class BotService {
  private adapterManager = new MessengerAdapterManager();
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
   */
  async addBot(bot: Bot): Promise<void> {
    const credentials: MessengerCredentials = {
      token: bot.token,
      platform: bot.platform,
    };
    
    await this.adapterManager.addAdapter(bot.id, credentials);
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  async sendMessage(
    botId: string,
    channelId: string,
    message: UnifiedMessage
  ) {
    const adapter = this.adapterManager.getAdapter(botId);
    if (!adapter) {
      throw new Error(`Bot ${botId} not found`);
    }
    
    return await adapter.sendMessage(channelId, message);
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  async broadcastToPlatform(
    platform: MessengerPlatform,
    channelId: string,
    message: UnifiedMessage
  ) {
    const adapters = this.adapterManager.getAdaptersByPlatform(platform);
    const results = [];
    
    for (const adapter of adapters) {
      try {
        const result = await adapter.sendMessage(channelId, message);
        results.push({ adapter: adapter.platform, result });
      } catch (error) {
        results.push({ 
          adapter: adapter.platform, 
          result: { 
            success: false, 
            error: error instanceof Error ? error.message : 'Unknown error' 
          } 
        });
      }
    }
    
    return results;
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
   */
  async broadcastToAll(channelId: string, message: UnifiedMessage) {
    const adapters = this.adapterManager.getAllAdapters();
    const results = [];
    
    for (const adapter of adapters) {
      try {
        const result = await adapter.sendMessage(channelId, message);
        results.push({ platform: adapter.platform, result });
      } catch (error) {
        results.push({ 
          platform: adapter.platform, 
          result: { 
            success: false, 
            error: error instanceof Error ? error.message : 'Unknown error' 
          } 
        });
      }
    }
    
    return results;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
   */
  getStats() {
    return this.adapterManager.getStats();
  }
  
  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  async dispose() {
    await this.adapterManager.dispose();
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
 */
export async function publishPost(
  bots: Bot[],
  post: {
    title: string;
    content: string;
    link?: string;
  }
) {
  const botService = new BotService();
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    for (const bot of bots) {
      await botService.addBot(bot);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message: UnifiedMessage = {
      text: `**${post.title}**\n\n${post.content}${post.link ? `\n\nüîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ](${post.link})` : ''}`,
      format: 'markdown',
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
    const results = [];
    for (const bot of bots) {
      try {
        const result = await botService.sendMessage(bot.id, bot.channelId, message);
        results.push({ 
          bot: bot.name, 
          platform: bot.platform, 
          success: result.success,
          messageId: result.messageId,
          error: result.error 
        });
      } catch (error) {
        results.push({ 
          bot: bot.name, 
          platform: bot.platform, 
          success: false,
          error: error instanceof Error ? error.message : 'Unknown error' 
        });
      }
    }
    
    return results;
  } finally {
    await botService.dispose();
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
 */
export async function checkBotsStatus(bots: Bot[]) {
  const results = [];
  
  for (const bot of bots) {
    try {
      const adapter = await createBotAdapter(bot);
      const botInfo = await adapter.getBotInfo();
      const permissions = await adapter.checkBotPermissions(bot.channelId);
      
      results.push({
        bot: bot.name,
        platform: bot.platform,
        status: 'active',
        botInfo,
        permissions,
      });
      
      await adapter.dispose();
    } catch (error) {
      results.push({
        bot: bot.name,
        platform: bot.platform,
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }
  
  return results;
}